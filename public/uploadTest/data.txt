cause the stream to be closed. The 'error' event indicates that an error has occurred and the stream has been closed. The 'end' event indicates that the server has finished sending and no errors occurred. Only one of 'error' or 'end' will be emitted. Finally, the 'status' event fires when the server sends the status.

The client-side streaming method RecordRoute is similar, except there we pass the method a callback and get back a Writable.

var call = client.recordRoute(function(error, stats) {
  if (error) {
    callback(error);
  }
  console.log('Finished trip with', stats.point_count, 'points');
  console.log('Passed', stats.feature_count, 'features');
  console.log('Travelled', stats.distance, 'meters');
  console.log('It took', stats.elapsed_time, 'seconds');
});
function pointSender(lat, lng) {
  return function(callback) {
    console.log('Visiting point ' + lat/COORD_FACTOR + ', ' +
        lng/COORD_FACTOR);
    call.write({
      latitude: lat,
      longitude: lng
    });
    _.delay(callback, _.random(500, 1500));
  };
}
var point_senders = [];
for (var i = 0; i < num_points; i++) {
  var rand_point = feature_list[_.random(0, feature_list.length - 1)];
  point_senders[i] = pointSender(rand_point.location.latitude,
                                 rand_point.location.longitude);
}
async.series(point_senders, function() {
  call.end();
});
Once we’ve finished writing our client’s requests to the stream using write(), we need to call end() on the stream to let gRPC know that we’ve finished writing. If the status is OK, the stats object will be populated with the server’s response.

Finally, let’s look at our bidirectional streaming RPC routeChat(). In this case, we just pass a context to the method and get back a Duplex stream object, which we can use to both write and read messages.

var call = client.routeChat();